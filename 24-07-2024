2191.  Sort the Jumbled Numbers.

class Pair{
    int val1;
    int val2;
    public Pair(int val1, int val2){
        this.val1 = val1;
        this.val2 = val2;
    }
}

class Solution {

    private int get(int num, int mapping[]){
        int n = 0;
        int i = 0;
        if(num == 0){
            return mapping[0];
        }
        while(num > 0){
            int val = mapping[num%10];
            if(i == 0){
                n = val;
            } 
            else{
                n = val*(int)(Math.pow(10,i)) + n;
            }
            i++;
            num /= 10;
        }
        return n;
    }

    public int[] sortJumbled(int[] mapping, int[] nums) {
        
        int n = nums.length;
        List<Pair> list = new ArrayList<>();

        for(int i : nums){
            Pair p = new Pair(i, get(i, mapping));
            list.add(p);
        }

        Collections.sort(list, (o1, o2) -> o1.val2 - o2.val2);

        for(int i = 0;i<n;i++){
            nums[i] = list.get(i).val1;
        }
        return nums;
    }
}
