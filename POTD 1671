1671. Minimum Number of removals to Make Mountain Array.

class Solution {
    public int minimumMountainRemovals(int[] nums) {
        
        int n = nums.length;
        
        // Finding the Longest Increasing Subsequence.
        int[] LIS = new int[n];
        Arrays.fill(LIS, 1);
        for(int i = 0;i < n;i++)
            for(int j = 0;j < i;j++)
                if(nums[i] > nums[j])
                    LIS[i] = Math.max(LIS[i], LIS[j]+1);
                
        
        // Finding the Longest Decreasing Subsequence.
        int[] LDS = new int[n];
        Arrays.fill(LDS, 1);
        for(int i = n-1; i >= 0; i--)
            for(int j = i+1; j < n;j++)
                if(nums[i] > nums[j])
                    LDS[i] = Math.max(LDS[i], LDS[j]+1);
        

        // Finding the minimum number of removals.
        int min = n;
        for(int i = 1;i< n-1;i++){
            if(Math.min(LDS[i], LIS[i]) > 1)
                min = Math.min(min, n-LIS[i]-LDS[i]+1);
        }
        return min;
    }
}
