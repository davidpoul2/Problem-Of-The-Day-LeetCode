632.  Smallest Range Covering Elements from K Lists.

class Pair{
    int val;
    int i;
    int j;

    public Pair(int _val, int _i, int _j){
        this.val = _val;
        this.i = _i;
        this.j = _j;
    }
}

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        
        int n = nums.size();

        PriorityQueue<Pair> pq = new PriorityQueue<>((a, b) -> a.val - b.val);

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int minInterval = Integer.MAX_VALUE;
        int low = 0;
        int high = 0;

        for(int i = 0;i<n;i++){
            max = Math.max(max, nums.get(i).get(0));
            pq.add(new Pair(nums.get(i).get(0), i, 0));
        }

        while(!pq.isEmpty()){
            var curr = pq.poll();
            min = curr.val;

            if(minInterval > max-min){
                minInterval = max-min;
                low = min;
                high = max;
            }

            if(curr.j + 1 == nums.get(curr.i).size())   return new int[]{low, high};
            pq.add(new Pair(nums.get(curr.i).get(curr.j+1), curr.i, curr.j+1));
            max = Math.max(max, nums.get(curr.i).get(curr.j+1));
        }

        return new int[]{low, high};
    }
}
