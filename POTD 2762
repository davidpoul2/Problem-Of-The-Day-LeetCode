2762.  Continuous Subarrays.

class Solution {
    public long continuousSubarrays(int[] nums) {
        
        int min = Integer.MAX_VALUE,
            max = Integer.MIN_VALUE;
        long count = 0L;

        int left = 0,
            right = 0;
        
        while(right < nums.length){

            min = Math.min(min, nums[right]);
            max = Math.max(max, nums[right]);

            if(max - min > 2){
                long window = right-left;
                count += ((window)*(window+1))/2;

                left = right;
                max = nums[right];
                min = nums[right];
                while(Math.abs(nums[right]-nums[left-1]) <= 2){
                    left--;
                    min = Math.min(min, nums[left]);
                    max = Math.max(max, nums[left]);
                }
                if(left < right){
                    window = right-left;
                    count -= ((window)*(window+1))/2;
                }
                
            }

            right++;
        }
        long window = right-left;
        count += ((window)*(window+1))/2;
        return count;
    }
}
