1905.  Count Sub Islands.

class Solution {
    record Pair(int i, int j){  }

    // BFS to detect the islands in grid1.
    private void bfsGrid1(int i, int j, int[][] vis, int[][] grid1, int n, int m){
        
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(i,j));
        vis[i][j] = 1;

        while(!queue.isEmpty()){
            var curr = queue.poll();
            int row[] = {-1,0,1,0};
            int col[] = {0,1,0,-1};
            for(int k = 0;k<4;k++){
                int adjRow = curr.i + row[k];
                int adjCol = curr.j + col[k];
                if(adjRow >= 0 && adjRow < n && adjCol >= 0 && adjCol < m && vis[adjRow][adjCol] == 0 && grid1[adjRow][adjCol] == 1){
                    queue.add(new Pair(adjRow, adjCol));
                    vis[adjRow][adjCol] = 1;
                }
            }
        }
    }

    // BFS to count sub islands in grid2.
    private boolean bfsGrid2(int i, int j, int[][] vis, int[][] grid2, int n, int m){
        
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(i,j));
        vis[i][j] = -1;
        boolean flag = true;

        while(!queue.isEmpty()){
            var curr = queue.poll();
            int row[] = {-1,0,1,0};
            int col[] = {0,1,0,-1};
            for(int k = 0;k<4;k++){
                int adjRow = curr.i + row[k];
                int adjCol = curr.j + col[k];
                if(adjRow >= 0 && adjRow < n && adjCol >= 0 && adjCol < m && grid2[adjRow][adjCol] == 1){
                    if(vis[adjRow][adjCol] == 1){
                        queue.add(new Pair(adjRow, adjCol));
                        vis[adjRow][adjCol] = -1;
                    }
                    else if(vis[adjRow][adjCol] == 0){
                        flag = false;
                    }
                }
            }
        }
        return flag;
    }

    public int countSubIslands(int[][] grid1, int[][] grid2) {
        
        int n = grid1.length;
        int m = grid1[0].length;
        int vis[][] = new int[n][m];

        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid1[i][j] == 1 && vis[i][j] == 0){
                    bfsGrid1(i,j,vis,grid1, n, m);
                }
            }
        }

        int count = 0;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(grid2[i][j] == 1 && vis[i][j] == 1){
                    if(bfsGrid2(i,j,vis,grid2, n, m))   count++;
                }
            }
        }
        return count;
    }
}
