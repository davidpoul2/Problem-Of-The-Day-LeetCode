1255. Maximum Score Words Formed by Letters.

class Solution {
    public int maxScoreWords(String[] words, char[] letters, int[] score) {
        boolean wordsVis[] = new boolean[words.length];

        HashMap<Character,Integer> map = new HashMap<>();
        for(char i: letters) map.put(i,map.getOrDefault(i,0)+1);

        int res = maxScore(words, letters, score, 0, words.length, map, new ArrayList<String>());
        
        return res;
    }

    private int maxScore(String[] words, char[] letters, int[] score, int index, int n, HashMap<Character, Integer> map, List<String> list){
        if(index >= n){
            return gives(list,new HashMap<Character, Integer>(map),score);
        }
        list.add(words[index]);
        int left = maxScore(words, letters, score, index+1,n,map,list);
        list.remove(list.size()-1);
        int right = maxScore(words,letters, score, index+1,n,map,list);
        return Math.max(left, right);
    }

    private int gives(List<String> list, HashMap<Character, Integer> map, int[] score){
        int max = 0;
        for(int i = 0;i< list.size();i++){
            int val = isChecked(list.get(i),map,score);
            if(val == -1) return 0;
            removeMap(list.get(i),map);
            max += val;
        }
        return max;
    }

    private void removeMap(String str, HashMap<Character, Integer> map){
        for(int i = 0;i<str.length();i++){
            char ch = str.charAt(i);
            if(map.containsKey(ch)){
                if(map.get(ch) > 0) map.put(ch, map.get(ch)-1);
                else map.remove(ch);
            }
        }
    }

    private int isChecked(String str, HashMap<Character, Integer> map, int[] score){
        HashMap<Character,Integer> temp = new HashMap<>();
        for(int i = 0;i<str.length();i++){
            temp.put(str.charAt(i),temp.getOrDefault(str.charAt(i),0)+1);
        }

        int val = 0;
        for(Map.Entry<Character,Integer> m : temp.entrySet()){
            if(map.containsKey(m.getKey())){
                if(map.get(m.getKey()) < m.getValue()) return -1;
                else{
                    val += score[m.getKey()-97]*m.getValue();
                }
            }
            else return -1;
        }
        return val;


    }
}
