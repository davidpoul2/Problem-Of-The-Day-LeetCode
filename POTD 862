862.  Shortest Subarray with Sum at Least K.

class Pair{
    long sum;
    int index;

    public Pair(long _sum, int _index){
        this.sum = _sum;
        this.index = _index;
    }
}

class Solution {
    public int shortestSubarray(int[] nums, int k) {
        
        int n = nums.length,
            shortest = Integer.MAX_VALUE;
        long sum = 0L;
        Deque<Pair> deque = new ArrayDeque<>();

        for(int i = 0;i<n;i++){
            sum += nums[i];

            if(sum >= k)    shortest = Math.min(shortest, i+1);

            Pair curr = null;
            while(!deque.isEmpty() && sum-deque.peekFirst().sum >= k){
                curr = deque.pollFirst();
            }

            if(curr != null)    shortest = Math.min(shortest, i - curr.index);

            while(!deque.isEmpty() && deque.peekLast().sum >= sum){
                deque.pollLast();
            }

            deque.addLast(new Pair(sum, i));
        }
        return shortest == Integer.MAX_VALUE ? -1 : shortest;
    }
}
