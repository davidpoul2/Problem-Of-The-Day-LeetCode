2601.  Prime Subtraction Operation.

class Solution {

    List<Integer> primes = new ArrayList<>();
    {
        for(int i = 2;i < 1001; i++){
            if(isPrime(i))  primes.add(i);
        }
    }

    public boolean isPrime(int num){

        //if(num == 2)    return true;
        for(int i = 2; i <= Math.sqrt(num);i++){
            if(num%i == 0)  return false;
        }
        return true;
    }

    public int find(int num){
        int low = 0;
        int high = primes.size()-1;

        while(low <= high){
            int mid = low + ((high-low)/2);

            if(primes.get(mid) <= num) low = mid+1;
            else high = mid-1;
        }

        return (low  == primes.size())?-1001:primes.get(low);
    }

    public boolean primeSubOperation(int[] nums) {

        int n = nums.length;
        for(int i = n-2 ; i>= 0;i--){
            if(nums[i] >= nums[i+1]){
                int val = nums[i] - find(nums[i] - nums[i+1]);
                if(val <= 0 )   return false;
                nums[i] = val;
            }
        }
        
        //System.out.println(nums[0]);
        for(int i = 1;i<n;i++){
            //System.out.println(nums[i]);
            if(nums[i] < nums[i-1]) return false;
        }
        return true;
    }
}
