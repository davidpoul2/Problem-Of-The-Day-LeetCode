1367.  Linked List in Binary Tree

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        return findPointer(head, root);
    }

    private boolean findPointer(ListNode head, TreeNode root){

        if(root == null)    return false;
        boolean flag = false;
        if(root.val == head.val){
            flag = isSub(false, head, root);
            if(flag)    return flag;
        }
        boolean left = findPointer(head, root.left);
        boolean right = findPointer(head, root.right);
        return left || right;
    }

    private boolean isSub(boolean flag, ListNode head, TreeNode root){
        if(head == null)    return true;
        if(root == null)    return false;
        if(flag && root.val != head.val)    return false;
        if(root.val == head.val)    flag = true;

        boolean left = isSub(flag, head.next, root.left);
        boolean right = isSub(flag, head.next, root.right);

        return left || right;
    }
}


// Approch 2 Optimal.
class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        return dfs(root, head, head);
    }

    private boolean dfs(TreeNode root, ListNode head, ListNode curr){

        if(curr == null)    return true;
        if(root == null)    return false;
        if(curr.val == root.val)    curr = curr.next;
        else if(root.val == head.val)   head = head.next;
        else curr = head;

        return (dfs(root.left, head, curr) || dfs(root.right, head, curr));
    }
}
